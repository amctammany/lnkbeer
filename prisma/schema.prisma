// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  SUPERUSER
  ADMIN
  USER
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  role                 UserRoles             @default(USER)
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  Style                Style[]
  waterProfiles        WaterProfile[]
  equipmentProfiles    EquipmentProfile[]
  mashProfiles         MashProfile[]
  fermentationProfiles FermentationProfile[]
  hopSensoryPanels     HopSensoryPanel[]
  hopNotes             HopNote[]
  yeasts               Yeast[]
  fermentables         Fermentable[]
  hops                 Hop[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum StyleCategory {
  beer
  mead
  cider
}

model Style {
  id            Int           @id @default(autoincrement())
  userId        String?
  owner         User?         @relation(fields: [userId], references: [id])
  name          String
  slug          String        @unique
  //recipes       Recipe[]
  category      StyleCategory
  subcategoryId Int
  identifier    String        @unique
  overall       String?
  aroma         String?
  appearance    String?
  flavor        String?
  mouthfeel     String?
  comments      String?
  history       String?
  ingredients   String?
  comparison    String?
  examples      String?
  ibuLow        Float?
  ibuHigh       Float?
  ibuFlex       Boolean       @default(false)
  ogLow         Float?
  ogHigh        Float?
  ogFlex        Boolean       @default(false)
  fgLow         Float?
  fgHigh        Float?
  fgFlex        Boolean       @default(false)
  srmLow        Float?
  srmHigh       Float?
  srmFlex       Boolean       @default(false)
  abvLow        Float?
  abvHigh       Float?
  abvFlex       Boolean       @default(false)
}

enum HopUsage {
  aroma
  bittering
  dual
}

model Hop {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  characteristics   String?
  country           String?
  usage             HopUsage?
  alpha             Float?
  alphaLow          Float?
  alphaHigh         Float?
  beta              Float?
  betaLow           Float?
  betaHigh          Float?
  caryophyllene     Float?
  caryophylleneLow  Float?
  caryophylleneHigh Float?
  cohumulone        Float?
  cohumuloneLow     Float?
  cohumuloneHigh    Float?
  farnesene         Float?
  farneseneLow      Float?
  farneseneHigh     Float?
  humulene          Float?
  humuleneLow       Float?
  humuleneHigh      Float?
  myrcene           Float?
  myrceneLow        Float?
  myrceneHigh       Float?
  totalOil          Float?
  totalOilLow       Float?
  totalOilHigh      Float?
  geraniol          Float?
  geraniolLow       Float?
  geraniolHigh      Float?
  other             Float?
  otherLow          Float?
  otherHigh         Float?
  linalool          Float?
  linaloolLow       Float?
  linaloolHigh      Float?

  bPinene           Float?
  bPineneLow        Float?
  bPineneHigh       Float?
  purpose           String?
  flavor            String?
  notes             String?
  substitutesString String[]
  styles            String[]
  //HopIngredient     HopIngredient[]
  hopSensoryPanels  HopSensoryPanel[]
  hopNote           HopNote[]
  userId            String?
  owner             User?             @relation(fields: [userId], references: [id])
}

model HopSensoryPanel {
  id            Int                   @id @default(autoincrement())
  hopId         String?
  slug          String
  hop           Hop                   @relation(fields: [slug], references: [slug])
  sweetAromatic Float                 @default(0)
  berry         Float                 @default(0)
  stoneFruit    Float                 @default(0)
  pomme         Float                 @default(0)
  melon         Float                 @default(0)
  tropical      Float                 @default(0)
  citrus        Float                 @default(0)
  floral        Float                 @default(0)
  herbal        Float                 @default(0)
  vegetal       Float                 @default(0)
  grassy        Float                 @default(0)
  earthy        Float                 @default(0)
  woody         Float                 @default(0)
  spicy         Float                 @default(0)
  onionGarlic   Float                 @default(0)
  driedFruit    Float                 @default(0)
  dank          Float                 @default(0)
  year          Int?
  producer      String?
  batchInfo     String?
  lotNumber     String?
  userId        String?
  userEmail     String?
  user          User?                 @relation(fields: [userEmail], references: [email])
  notes         String?
  HopNote       HopNote?
  aromas        CharacteristicAroma[]
  //aromas        SensoryAroma[] //@relation(fields: [aromaIds], references: [id])

  @@unique(name: "pId", fields: [slug, userId])
}

//model SensoryAroma {
//aromaId               String
//aroma                 CharacteristicAroma @relation(fields: [characteristicAromaId], references: [id])
//sensoryPanelId        String
//SensoryPanel          HopSensoryPanel     @relation(fields: [hopSensoryPanelId], references: [id])
//characteristicAromaId String
//hopSensoryPanelId     Int

//@@id(name: "id", [aromaId, sensoryPanelId])
//}

model HopNote {
  uid            Int             @unique @default(autoincrement())
  slug           String
  hopId          String
  sensoryPanelId Int             @unique
  userEmail      String
  batch          String?
  comments       String?
  hop            Hop             @relation(fields: [slug], references: [slug])
  user           User            @relation(fields: [userEmail], references: [email])
  sensoryPanel   HopSensoryPanel @relation(fields: [sensoryPanelId], references: [id], onDelete: Cascade)

  @@id(name: "id", [hopId, userEmail])
}

enum AromaGroups {
  DriedFruit
  Berry
  StoneFruit
  Pomme
  Melon
  Tropical
  Citrus
  Floral
  Herbal
  Vegetal
  Grassy
  Earthy
  Woody
  Spicy
  SweetAromatic
  OnionGarlic
  Dank
  OffFlavors
}

model CharacteristicAroma {
  id            String            @id @unique @default(cuid())
  name          String
  group         AromaGroups
  sensoryPanels HopSensoryPanel[]

  @@unique([name, group])
}

model Fermentable {
  id           String  @id @unique @default(cuid())
  name         String
  slug         String  @unique
  description  String?
  notes        String?
  manufacturer String?
  country      String?
  power        Int?
  maxUsage     Float?
  color        Float?
  potential    Float?
  stability    String?
  userId       String?
  owner        User?   @relation(fields: [userId], references: [id])
  //FermentableIngredient FermentableIngredient[]
}

enum YeastForm {
  Liquid
  Dry
}

enum YeastFlocculation {
  VeryHigh
  High
  Medium
  Low
  VeryLow
}

enum YeastType {
  Ale
  Lager
  Wheat
  Wine
}

model Yeast {
  id              String             @id @unique @default(cuid())
  name            String
  slug            String             @unique
  usage           String?
  description     String?
  notes           String?
  manufacturer    String?
  type            YeastType?
  form            YeastForm?
  tempLow         Float?
  tempHigh        Float?
  flocculation    YeastFlocculation?
  tolerance       Float?
  attenuation     Float?
  attenuationLow  Float?
  attenuationHigh Float?
  userId          String?
  owner           User?              @relation(fields: [userId], references: [id])

  //  YeastIngredient YeastIngredient[]
}

model WaterProfile {
  id          String         @id @default(cuid())
  userId      String?
  owner       User?          @relation(fields: [userId], references: [id])
  name        String
  slug        String         @unique
  calcium     Float?         @default(0)
  magnesium   Float?         @default(0)
  sodium      Float?         @default(0)
  chloride    Float?         @default(0)
  sulfate     Float?         @default(0)
  bicarbonate Float?         @default(0)
  description String?
  forkedFrom  String?
  origin      WaterProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks       WaterProfile[] @relation("origin")
}

enum SpargeMethodType {
  default
  batchSparge
  flySparge
  none
}

model EquipmentProfile {
  id                  String             @id @default(cuid())
  userId              String?
  owner               User?              @relation(fields: [userId], references: [id])
  forkedFrom          String?
  origin              EquipmentProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks               EquipmentProfile[] @relation("origin")
  name                String
  slug                String             @unique
  description         String?
  batchVolume         Float?
  boilVolume          Float?
  preboilVolume       Float?
  boilTime            Float?
  brewEfficiency      Float?
  mashEfficiency      Float?
  spargeMethod        SpargeMethodType?  @default(default)
  boilOffRate         Float?
  kettleTopOff        Float?             @default(0)
  fermenterterTopOff  Float?             @default(0)
  hopUtilization      Float?             @default(1)
  mashTunDeadSpace    Float?             @default(0)
  mashTunVolume       Float?
  mashTunWeight       Float?
  mashTunHeatCapacity Float?             @default(0.12)
  mashTunMinimum      Float?
  mashTunMaximum      Float?
  spargeMinimum       Float?
  spargeMaximum       Float?
  trubLoss            Float?             @default(0)
  mashLoss            Float?             @default(0)
  fermenterLoss       Float?             @default(0)
  grainAbsorption     Float?             @default(0.5)
  waterGrainRatio     Float?             @default(1.5)
  //  Recipe          Recipe[]
}

model MashProfile {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  steps       MashStep[]
  userId      String?
  owner       User?         @relation(fields: [userId], references: [id])
  forkedFrom  String?
  origin      MashProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks       MashProfile[] @relation("origin")
  //  Recipe          Recipe[]
}

enum MashStepType {
  temperature
  infusion
  decoction
}

model MashStep {
  id            String       @id @default(cuid())
  type          MashStepType @default(temperature)
  name          String?
  rank          Int
  temperature   Float
  time          Float
  rampTime      Float?       @default(0)
  MashProfile   MashProfile? @relation(fields: [mashProfileId], references: [id])
  mashProfileId String?

  //@@unique([mashProfileId, rank])
}

model FermentationProfile {
  id          String                @id @default(cuid())
  name        String
  slug        String                @unique
  description String?
  steps       FermentationStep[]
  userId      String?
  owner       User?                 @relation(fields: [userId], references: [id])
  forkedFrom  String?
  origin      FermentationProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks       FermentationProfile[] @relation("origin")
  //  Recipe          Recipe[]
}

enum FermentationStepType {
  primary
  secondary
  tertiary
  coldcrash
  conditioning
}

model FermentationStep {
  id                    String               @id @default(cuid())
  type                  FermentationStepType @default(primary)
  name                  String?
  rank                  Int
  temperature           Float
  time                  Float
  rampTime              Float                @default(0)
  FermentationProfile   FermentationProfile? @relation(fields: [fermentationProfileId], references: [id])
  fermentationProfileId String?

  //@@unique([mashProfileId, rank])
}
